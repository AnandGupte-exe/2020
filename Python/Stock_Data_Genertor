import pandas as pd
import pandas_datareader as web
import matplotlib.pyplot as plt
import datetime as dt
import numpy as np

class Indicators:

    def __init__(self, x, y):

        self.buffer = y

        self.start = dt.datetime(2010, 1, 1)
        self.end = dt.datetime.now()

        self.data = web.DataReader(x, 'yahoo', self.start, self.end)

        #print(self.data)


    def VOL(self):

        return self.data['Volume']


    def Open(self):

        return self.data['Open']
        

    def Close(self):

        return self.data['Adj Close']


    def RSI(self, x):

        delta = self.data['Adj Close'].diff(1)

        delta.dropna(inplace=True)

        positive = delta.copy()
        negative = delta.copy()

        positive[positive < 0] = 0
        negative[negative > 0] = 0

        days = x

        average_gain = positive.rolling(window=days).mean()
        average_loss = negative.rolling(window=days).mean()

        relative_strength = average_gain / average_loss

        RSI = (100.0 - (100.0 / (1.0 + relative_strength))) * 0.1
        
        return RSI


    def MACD(self, x, y, Z):

        CloseData = self.data['Adj Close']
        exp1 = CloseData.ewm(x, adjust=False).mean()
        exp2 = CloseData.ewm(y, adjust=False).mean()

        MACD = exp1 - exp2

        Signal = MACD.ewm(Z, adjust=False).mean()

        MACDhist = MACD - Signal
        return MACDhist
        
        
    def SMA(self, x):

        CloseData = self.data['Adj Close']

        SMA = CloseData.rolling(window=x).mean()

        return SMA


    def BB(self, x, y):

        CloseData = self.data['Adj Close']

        SMA = x
        STD = CloseData.rolling(window=y).std()

        BB_upper = SMA + (STD * 2)
        BB_lower = SMA - (STD * 2)

        return BB_upper, BB_lower


    def Action(self):

        LongNum = 0
        ShortNum = 0
        ExitNum = 0

        MaxDataNum = 400

        CloseData = self.data['Adj Close']

        Actionlst = []

        for i in range(100):
            Actionlst.append(np.nan)

        #print(len(Actionlst))

        for i in range(len(CloseData) - 100):

            if i + 100 != len(CloseData) - 1:
                
                
                if CloseData[i + 1 + 100] > (CloseData[i + 100] + self.buffer): #long

                    if LongNum != MaxDataNum:

                        Actionlst.append(1)
                        LongNum = LongNum + 1

                    else:
                        Actionlst.append(np.nan)

                
                if CloseData[i + 1 + 100] < (CloseData[i + 100] - self.buffer): #Short

                    if ShortNum != MaxDataNum:

                        Actionlst.append(2)
                        ShortNum = ShortNum + 1
                    
                    else:
                        Actionlst.append(np.nan)


                
                if CloseData[i + 1 + 100] < (CloseData[i + 100] + self.buffer) and CloseData[i + 1 + 100] > (CloseData[i + 100] - self.buffer): #Exit

                    if ExitNum != MaxDataNum:

                        Actionlst.append(3)
                        ExitNum = ExitNum + 1
                    
                    else:
                        Actionlst.append(np.nan)


        print(ExitNum)
        print(ShortNum)
        print(LongNum)

        print(Actionlst)

        Actionlst.append(np.nan)

        return Actionlst


    def DataIn(self):
        List = []

        for i in range(len(self.data)):
            List.append("True")

        return List


SPY = Indicators('SPY', 0.75)

Open = SPY.Open()

Close = SPY.Close()

Volume = SPY.VOL()

RSI = SPY.RSI(14)

MACD = SPY.MACD(12, 26, 9) #exp1, exp2 and signal

SMA_5 = SPY.SMA(5)

SMA_10 = SPY.SMA(10)

SMA_50 = SPY.SMA(50)

SMA_100 = SPY.SMA(100)

BB_lower = SPY.BB(SPY.SMA(20), 20)[1]

BB_upper = SPY.BB(SPY.SMA(20), 20)[0]





output = pd.concat([RSI, MACD, SMA_5, SMA_10, SMA_50, SMA_100, BB_lower, BB_upper, Open, Close, Volume], axis=1)

output.columns = ['RSI', 'MACD', 'SMA_5', 'SMA_10', 'SMA_50', 'SMA_100', 'BB_lower', 'BB_upper', 'Open', 'Close', 'Volume']


output['Action'] = SPY.Action()

ActionLst = SPY.Action()

print(ActionLst.count(2))
print(ActionLst.count(1))
print(ActionLst.count(3))

output['Running'] = SPY.DataIn()

output = output.dropna()

output = output.sample(frac = 1)

print(output.tail(10))


output.to_csv()

