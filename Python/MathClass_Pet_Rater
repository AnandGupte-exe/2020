#@markdown # PetPicker2000


import numpy as np
import math as math
from IPython.display import HTML, display
import time as t
import ipywidgets as widgets


Init_data = [[1500, 120,  13,   3, 75, 50,   60, 1000],
             
             [900,  60,   16,   2, 50, 25,   35, 500],

             [25,   15,   10,   0, 5,  0.5,  2,  5],

             [30,   15,   15,   1, 20, 0.2,  7,  1.5],

             [100,  5,    25,   0, 10, 20,   3,  2.5],

             [20,   10,   3,    2, 10, 0.4,  7,  2],

             [225,  20,   6,    2, 40, 2,    9,  7.5],

             [400,  60,   6.5,  3, 50, 6.5,  16, 15],

             [220,  45,   2,    2, 50, 0.75, 10, 4],

             [130,  30,   17.5, 3, 20, 0.7,  10, 2],

             [250,  60,   15,   0, 5,  0.06, 3,  2],

             [50,   22.5, 75,   2, 35, 15,   7,  4]
             
            ]



def get_user_data():

    output = []

    widgets.FloatSlider()

    #@markdown #### 1)What is your ideal pets inital cost?
    Q1 = 512 #@param {type:"slider", min:0, max:1500, step:1}
    output.append(Q1)

    #@markdown #### 2)How much time per day do you want to spend maintaning the pet?
    Q2 = 50 #@param {type:"slider", min:0, max:120, step:1}
    output.append(Q2)

    #@markdown #### 3)What is your ideal pets lifespan?
    Q3 = 29 #@param {type:"slider", min:0, max:75, step:1}
    output.append(Q3)

    #@markdown #### 4)How trainable do you want your pet to be? (0 = not trainable, 1 = hard, 2 = medium, 3 = easy)
    Q4= 1 #@param {type:"slider", min:0, max:3, step:1}
    output.append(Q4)

    #@markdown #### 5)What is your ideal pets monthly cost?
    Q5 = 49 #@param {type:"slider", min:0, max:75  , step:1}
    output.append(Q5)

    #@markdown #### 6)What is your ideal pets weight?
    Q6 = 24.7 #@param {type:"slider", min:0, max:50, step:0.1}
    output.append(Q6)

    #@markdown #### 7)What is your ideal pets length?
    Q7 = 24.8 #@param {type:"slider", min:0, max:60, step:0.1}
    output.append(Q7)

    #@markdown #### 8)What is the max space will your pet have accses to? (square feet)
    Q8 = 599 #@param {type:"slider", min:0, max:1000, step:1}
    output.append(Q8)

    return output



def scale__inti__Data(x):

    Tinput = np.transpose(x)
    maxData = []

    output = []

    for i in range(len(Tinput)):

        maxData.append(float(max(Tinput[i])))

    for a in range(len(Tinput)):

        buffer = []

        for b in range(len(Tinput[0])):

            buffer.append(Tinput[a][b] / maxData[a])

        output.append(buffer)

    output = np.transpose(output)

    return output, maxData



def scale__user__Data(x, y):

    output = []

    for i in range(len(y)):

        output.append(y[i] / x[i])

    return output



def find_Score(x,y):

    y = y.tolist()

    SpaceLst = []
    OutputSpaceLst = []

    spaceX = x[len(x) - 1]

    x.pop(len(x) - 1)


    for i in range(len(y)):

        SpaceLst.append(y[i][len(x)])

        y[i].pop(len(x))


    local_output = []
    total_output = []


    for a in range(len(y)):

        buffer = []

        for b in range(len(x)):

            buffer.append(abs(x[b] - y[a][b]))

        local_output.append(buffer)


    for i in range(len(y)):

        if SpaceLst[i] < spaceX:
            OutputSpaceLst.append(0)

        else:
            OutputSpaceLst.append(SpaceLst[i] - spaceX)


    for i in range(len(OutputSpaceLst)):

        local_output[i].append(OutputSpaceLst[i])

    for i in range(len(local_output)):
        total_output.append(sum(local_output[i]))

    return total_output



def findPet(x):

    indexlst = ['dog',
                'cat',
                'fish',
                'gecko',
                'snake',
                'hamster',
                'pair of guinea pigs',
                'indoor rabits',
                'pair of rats',
                'parakeet',
                'frog',
                'tortouise']


    min_index = x.index(min(x))

    output = indexlst[min_index]

    return output



user_data = get_user_data()


t.sleep(0.3)

Scaled_Init_data = scale__inti__Data(Init_data)[0]

Scaled_User_data = scale__user__Data( scale__inti__Data(Init_data)[1], user_data)

Score = find_Score(Scaled_User_data, Scaled_Init_data)

def progress(value, max=100):

    return HTML("""
        
        <progress
            value='{value}'
            max='{max}',
            style='width: 100%'
        >

            {value}
        </progress>

    """.format(value=value, max=max))

out = display(progress(0, 100), display_id=True)

for ii in range(101):

    t.sleep(0.02)
    out.update(progress(ii, 100))

Final_Pet = findPet(Score)


print("The best pet for you is:")


def increase_font():
  from IPython.display import Javascript
  display(Javascript('''
  for (rule of document.styleSheets[0].cssRules){
    if (rule.selectorText=='body') {
      rule.style.fontSize = '30px'
      break
    }
  }
  '''))

increase_font()

print(Final_Pet)
